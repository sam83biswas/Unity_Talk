@model UnityTalk.Models.GroupTable

@{
    ViewBag.Title = "Create Group";
}


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Create class</title>
    <link href="~/Content/css/createGrp.css" rel="stylesheet">

    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.css" />

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css" integrity="sha512-DTOQO9RWCH3ppGqcWaEA1BIZOC6xxalwEsw9c2QQeAIftl+Vegovlnee1c9QX4TctnWMn13TZye+giMm8e2LwA==" crossorigin="anonymous" referrerpolicy="no-referrer" />

    <!--Font Link - League Sharpen , Poppins , Open Sans-->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>


</head>
<body class="home">
    <div class="Maincontainer">
        @if (TempData["Success"] != null)
        {
            <div class="SuccessOverlay">
                <div class="successcard">
                    <button type="button" class="successdismiss" onclick="closesuccessOverlay()"><i class="fa-solid fa-xmark"></i></button>
                    <div class="successheader">
                        <div class="successimage">
                            <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"> <path d="M20 7L9.00004 18L3.99994 13" stroke="#000000" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path> </g></svg>
                        </div>
                        <div class="successcontent">
                            <span class="title">Successfully Group Cfreated</span>
                            <p class="successmessage">@TempData["Success"]</p>
                        </div>
                        <div class="successactions">
                            <button class="successopen" type="button" onclick="window.location.href = '@Url.Action("grupView", "Groupview", new { grpid = TempData["grpId"] })'">View Group</button>
                            <button class="successback" type="button" onclick="window.location.href = '@Url.Action("dashboard","Dashboard")'">Return to Dashboard</button>
                        </div>
                    </div>
                </div>
            </div>
        }
        <div class="leftPart">
            <div class="headerText">
                <h1>Craft Your <span>Community</span>: </h1>
                <h1>Start <span>Grouping</span> Today</h1>
                <p>Chat, share files, and meet virtually - all in one place</p>
                <p>Textbook learning just got interactive. Join the study revolution.</p>
                <p>Access files and folders within your group.</p>
            </div>
            <div class="ImageContainer swiper mySwiper">
                <div class="swiper-wrapper">
                    <div class="swiper-slide"><img src="~/Content/assets/IndexImages/create1.png"></div>
                    <div class="swiper-slide"><img src="~/Content/assets/IndexImages/create2.png"></div>
                    <div class="swiper-slide"><img src="~/Content/assets/IndexImages/create3.png"></div>
                    <div class="swiper-slide"><img src="~/Content/assets/IndexImages/create4.png"></div>

                </div>
                <div class="swiper-pagination"></div>
            </div>
        </div>
        <div class="rightPart">

            <div class="formContainer">
                <h1>Create Group</h1>
                <form action="@Url.Action("createGrp","Dashboard")" method="post" class="CreateForm">
                    @Html.AntiForgeryToken()
                    <div class="grpNameContainer contInput">
                        <p class="inputHeader">Group Name @Html.ValidationMessageFor(model => model.GrpName, "", new { @class = "text-danger" , style = "font-size: 12px; font-weight:normal;"})</p>
                        <div class="groupName form">
                            @Html.EditorFor(model => model.GrpName, new { htmlAttributes = new { @class = "input", autocomplete = "off", placeholder = "Type group name", required = "required" } })

                            <span class="input-border"></span>
                        </div>
                    </div>
                    <div class="grpDescpContainer contInput ">
                        <p class="inputHeader">Group Description @Html.ValidationMessageFor(model => model.GrpDescp, "", new { @class = "text-danger" })</p>
                        <div class="grpDescp form">
                            @Html.EditorFor(model => model.GrpDescp, new { htmlAttributes = new { @class = "input", autocomplete = "off", placeholder = "Type group description", required = "required" } })
                            <span class="input-border"></span>

                        </div>
                    </div>
                    <div id="switch" class="radio">
                        <p class="inputHeader">Select The Group Mode: </p>
                        @Html.RadioButtonFor(model => model.GrpMode, true, new { id = "public" })

                        @Html.Label("public", "Public")

                        @Html.RadioButtonFor(model => model.GrpMode, false, new { id = "private" })

                        @Html.Label("private", "Private")

                        <p class="helpingComment">Choose between public for open discussions or private for exclusive collaborations. Find the perfect fit for your communication needs.</p>
                    </div>
                    <!-- add Choice of Images or banner if u want -->

                    <button type="submit" class="createBtn" role="button" value="Create">
                        <span>Create</span>
                    </button>
                </form>
            </div>
        </div>
    </div>

    <!-- Swiper JS -->
    <script src="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.js"></script>

    <!-- Initialize Swiper -->
    <script>

        function closesuccessOverlay() {
            let a = document.querySelector(".SuccessOverlay");
            if (a) {
                a.style.display = "none";
            }
        }

        var swiper = new Swiper(".mySwiper", {
            slidesPerView: 1,
            spaceBetween: 30,
            centeredSlides: true,
            autoplay: {
                delay: 2500,
                disableOnInteraction: false,
            },
            pagination: {
                el: ".swiper-pagination",
                clickable: true,
            },
            navigation: {
                nextEl: ".swiper-button-next",
                prevEl: ".swiper-button-prev",
            },
        });
    </script>
    @section scripts {
        <script>
            document.addEventListener('DOMContentLoaded', function () {

                let activeNavLinks = document.querySelectorAll('.nav-link.active');

                activeNavLinks.forEach(function (link) {
                    link.classList.remove('active');
                });
                let dashboardElement = document.querySelector('.navDashboard-l');

                if (dashboardElement) {
                    dashboardElement.classList.add('active');
                }
            });
        </script>
}
    </body>
</html>

